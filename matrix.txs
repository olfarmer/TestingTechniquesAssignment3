{-
TorXakis - Model Based Testing
Copyright (c) 2015-2021 ESI (TNO) and Radboud University
See LICENSE at root directory of this repository.
-}

-- ----------------------------------------------------------------------------------------- --
-- Model of a Queue of Integers,
-- with inputs 'In !Enq(x)' and 'In !Deq', and with output 'Out !x'.


-- ----------------------------------------------------------------------------------------- --
-- General Data Definitions

-- ----------------------------------------------------------------------------------------- --





-- ----------------------------------------------------------------------------------------- --
-- Operations :


TYPEDEF  Op   ::=   Start
                  | Stop
                  | CreateUser { name :: String; password :: String }
                  | LoginUser { loginName :: String; loginPassword :: String }
ENDDEF


-- ----------------------------------------------------------------------------------------- --
FUNCDEF overflow (x :: Int) :: Bool
   ::=
        (x < -2147483648) \/ ( x > +2147483647)
ENDDEF

FUNCDEF isValidUsername ( val :: String ) :: Bool
 ::=
    strinre(val, REGEX('[a-zA-Z0-9_.-]+') )
ENDDEF


-- ----------------------------------------------------------------------------------------- --
-- channel definitions
--   In  :  channel with messages of type QueueOp
--   Out :  channel with messages of type Int

CHANDEF  Channels  ::=    In   :: Op
                        ; Out  :: String
ENDDEF


-- ----------------------------------------------------------------------------------------- --
-- state automaton definition for a queue

STAUTDEF matrixStaut [ Inp :: Op; Outp :: String ] ( )
  ::=
    STATE
        stopped, started, starting, stopping, creatingUser, createdUser, loggingIn, loggedIn
    VAR
        started :: Bool;
        userName :: String;
        password :: String
    INIT
        stopped { started := False; userName := "" ; password := ""}
    TRANS
        started  ->  Inp ? op [[ IF isCreateUser(op) THEN isValidUsername(name(op)) ELSE False FI ]] {userName := name(op); password := password(op)}  ->  creatingUser
        creatingUser -> Outp ! "created" -> createdUser
        createdUser -> Inp ? op [[ IF isLoginUser(op) THEN (loginName(op) == userName /\ (loginPassword(op) == password)) ELSE False FI ]] -> loggingIn
        loggingIn -> Outp ! "loggedIn" -> loggedIn
--        started  ->  Inp ? op [[ isStop(op) ]]  ->  stopping
        stopped  ->  Inp ? op [[ isStart(op) ]]  ->  starting
        starting -> Outp ! "started" -> started
        stopping -> Outp ! "stopped" -> stopped
ENDDEF


-- ----------------------------------------------------------------------------------------- --
-- model definition for the Queue system
--   declaring channel In  as input channel  (Queue system point of view)
--   declaring channel Out as output channel (Queue system point of view)
--   initializing queueStaut with channels In and Out and no parameters

MODELDEF  Matrix
   ::=
        CHAN IN    In
        CHAN OUT   Out

        BEHAVIOUR  matrixStaut [ In, Out ] ( )
ENDDEF


-- ----------------------------------------------------------------------------------------- --
-- definition of the tester connection to the sut
--   the tester is acting as client on a socket
--   channel In is declared as output (tester point of view), mapped to socket (localhost,7890),
--     a message of type QueueOp on channel In is encoded as string with standard function toString
--   channel Out is declared as input (tester point of view), mapped to socket (localhost,7890),
--     a received string on socket (localhost,7890), which must represent an integer,
--     is decoded with standard function fromString and forwarded to channel Out

CNECTDEF  Sut
   ::=
        CLIENTSOCK

        CHAN  OUT  In                         HOST "localhost"  PORT 7890
        ENCODE     In ? op               ->  ! toString(op)

        CHAN  IN   Out                        HOST "localhost"  PORT 7890
        DECODE     Out ! fromString(s)   <-   ? s
ENDDEF


-- ----------------------------------------------------------------------------------------- --
-- ----------------------------------------------------------------------------------------- --
